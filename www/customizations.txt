=== IOS CUSTOMIZATIONS ===
add frameworks/libraries:
- AssetsLibrary.framework
- AudioToolbox.framework
- libsqlite3.dylib
- libz.*.tbd

ios
get ZipFileDownloader re-added
    - add the folder to as a group to XCode
get acap files re-added
    - copy acap folder to platforms/ios, make a TTS folder/group in XCode, add all the acap files individually

ios/CoughDrop/CoughDrop-info.plist
add
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoads</key>
		<true/>
	</dict>
to support TLS for Amazon

in ios/CoughDrop/Classes/MainViewController.m:

// SHOULD NOT NEED THIS ANYMORE with keyboard plugin
// http://stackoverflow.com/questions/32743649/hide-shortcut-keyboard-bar-for-uiwebview-in-ios-9
#import <objc/runtime.h>

- (void) hideKeyboardShortcutBar: (UIView *)view
{
    for (UIView *sub in view.subviews) {
        [self hideKeyboardShortcutBar:sub];
        if ([NSStringFromClass([sub class]) isEqualToString:@"UIWebBrowserView"]) {
            
            Method method = class_getInstanceMethod(sub.class, @selector(inputAccessoryView));
            IMP newImp = imp_implementationWithBlock(^(id _s) {
                if ([sub respondsToSelector:@selector(inputAssistantItem)]) {
                    UITextInputAssistantItem *inputAssistantItem = [sub inputAssistantItem];
                    inputAssistantItem.leadingBarButtonGroups = @[];
                    inputAssistantItem.trailingBarButtonGroups = @[];
                }
                return nil;
            });
            method_setImplementation(method, newImp);
            
        }
    }
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    [self hideKeyboardShortcutBar:self.webView];
}


=== ANDROID CUSTOMIZATIONS ===
copy splash screen images from www/assets/splash
to platforms/android/res

copy build-extras.gradle to platforms/android

check that icons all got copied correctly

open platforms/android/src/org/apache/cordova/splashscreen/SplashScreen.java
comment out this.removeSplashScreen();
... for onPause? or onDestroy?

copy .jar for acapela to platforms/android/app/libs
copy folders with .so files for acapela to platforms/android/app/src/main/jniLibs

AndroidManifest.xml
    <uses-feature android:name="android.hardware.nfc" android:required="false" />
    <uses-feature android:name="android.hardware.camera" android:required="false" />
    <uses-feature android:name="android.hardware.microphone" android:required="false" />
    <uses-feature android:name="android.hardware.location" android:required="false" />
    <uses-feature android:name="android.hardware.location.gps" android:required="false" />
    <uses-permission android:name="android.permission.WRITE_SETTINGS" android:required="false" />
    <uses-permission android:name="android.permission.WAKE_LOCK" android:required="false" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:required="false" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" android:required="false" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" android:required="false" />
    <uses-permission android:name="android.permission.RECORD_AUDIO" android:required="false" />
    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" android:required="false" />
    <uses-permission android:name="android.permission.READ_PHONE_STATE" android:required="false" />
    <uses-permission android:name="android.permission.RECORD_VIDEO" android:required="false" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:required="false" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" android:required="false" />
    <uses-permission android:name="com.android.vending.BILLING" android:required="false" />
    <uses-permission android:name="android.permission.VIBRATE" android:required="false" />
    <uses-permission android:name="android.permission.NFC" android:required="false" />
    <uses-permission android:name="android.permission.EXTERNAL_STORAGE" android:required="false" />
    <uses-permission android:name="android.permission.CAMERA" android:required="false" />
    <uses-permission android:name="android.webkit.PERMISSIONREQUEST" android:required="false" />
    (you may have to manually modify android.json to get the required=false to stick and to add missing permissions)

global search for JavaVersion.VERSION_1 => needs to be JavaVersion.VERSION_1_8

build.gradle
    if (false) { //Boolean.valueOf(cdvBuildMultipleApks)) {
        productFlavors {
            armv7 {
                versionCode defaultConfig.versionCode*10 + 2
                ndk {
                    abiFilters "armeabi-v7a", ""
                }
            }
            x86 {
                versionCode defaultConfig.versionCode*10 + 4
                ndk {
                    abiFilters "x86", ""
                }
            }
            all {
                ndk {
                    abiFilters "all", ""
                }
            }
        }
    }
    else if (!cdvVersionCode) {
      def minSdkVersion = cdvMinSdkVersion ?: privateHelpers.extractIntFromManifest("minSdkVersion")
      // Vary versionCode by the two most common API levels:
      // 14 is ICS, which is the lowest API level for many apps.
      // 20 is Lollipop, which is the lowest API level for the updatable system webview.
      if (minSdkVersion >= 20) {
        defaultConfig.versionCode = defaultConfig.versionCode*10 + 9
      } else if (minSdkVersion >= 14) {
        defaultConfig.versionCode = defaultConfig.versionCode*10 + 8
      }
    }

=== PUBLISHING ===
ios
cordova prepare
in XCode, Project -> Archive, Upload to App Store

android
bin/build_android
